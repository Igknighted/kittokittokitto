 _  ___ _   _          _  ___ _   _        
| |/ (_) |_| |_ ___   | |/ (_) |_| |_ ___  
| ' /| | __| __/ _ \  | ' /| | __| __/ _ \ 
| . \| | |_| || (_) | | . \| | |_| || (_) |
|_|\_\_|\__|\__\___/  |_|\_\_|\__|\__\___/ 
              _  ___ _   _        
             | |/ (_) |_| |_ ___  
             | ' /| | __| __/ _ \ 
             | . \| | |_| || (_) |
             |_|\_\_|\__|\__\___/ 
=================================================

Welcome to KittoKittoKitto, a Virtual Pet Site template app.

Kitto's goals are simple:
    
    * Help new petgame developers get off the ground as quickly as possible.
      Writing the whole register/login/boards/adopt pet thing over and over
      is a pointless waste of time.

      That said, it is not within the scope of Kitto to provide *everything*
      you would see in a run-of-the-mill petgame. What is in this package is
      every major feature a basic installation of Kitto is going to provide.
      
      There is no battle stadium or trading post. There are not even user
      shops! The purpose of Kitto is to provide *the very basic* components.
      It is my personal belief that providing *too much* functionaility will
      just encourage dozens of sites using the Kitto code and *no*
      custmizations to speak of will spring up.
      
      Your game should be unique - but that does not mean you should waste
      time re-inventing the wheel. I will probably be publishing several
      extensions to Kitto to add those functions, but they will be optional
      (and, of course, Free) add-ons.  
    
    * Help educate brand-new and novice programmers by giving them a well-
      designed application to hack away at. The code in Kitto will (hopefully)
      service as an inspiration light of Best Practices and Brilliantly DRY
      code to the next generation of pet-game developers.  
    
      I started programming because of petgames. Three years later, I work for 
      an ISP doing web applications. I want that to happen to you, too - it's 
      fun, it's good experience, it makes money. I built a career because of
      what I learned, and I am all about sharing that experience with whoever
      is willing. 

== 0. Requirements ==
* PHP >=5.1 (PHP 5.0 may work, too, but who uses that anymore?)
* MySQL >=4 (test on 5, but it'll work on 4 - I promise).
  * Oracle 9i/10g might actually work with a few changes (grep the includes/
    directory for @rdbms-specific to see what you need to change - there's not
    really that much marrying this to MySQL). So, if you're really a sadistic
    son-of-a-bitch, have at it.
* Apache + mod_rewrite
 * If you want to write lighttpd rewrite rules, *PLEASE SEND THEM TO ME!*

== 1. Installation ==
1. Unzip package and transmit its contents to your webserver.

2. Chmod the /cache/ dir so that it is writable by the webserver.

3. Chmod the /template/cache, /template/config/, and /template/templates_c
   directories to be writable by the webserver. However, DO NOT DO THIS TO 
   /template/templates - that is insecure.
   
4. Load the db/mysqlX_ddl.sql file into your MySQL database. It contains all of
   the table structures needed by this app.
   * The MySQL 5 DDL file is generated by mysqldump. It should work on any MySQL 5
     server.
   * The MySQL 4 DDL file is generated by PhpMyAdmin with MYSQL40 compatability
     mode enabled. This should work on all versions of MySQL greater than or
     equal to 4.0.0.
   * You're SOL if you want Oracle DDL. If you port it, please send the SQL to
     me!

4a. Load some SQL files from /db/data in to your database. These
    contain seed data. The following files are *REQUIRED* to have your site work. 
    If these files are not loaded, it *WILL* cause your installation to be 
    inoperable.
        * jump_pages.sql
        * datetime_format.sql
        * timezone.sql
        * staff_permission.sql
   
    Unless you are an advanced Kitto developer and know *exactly* what you are
    doing, you will need to load these files to have your site be useful:
        * cron_tab.sql
        * item_class.sql
        * staff_group.sql
    
    If you are new to Kitto, I strongly advise you load *all* of the sample data
    in, and not just those few files. Even if you intend to delete the pets and
    item_types as soon as your installation is complete, they will provide you with
    an idea of how everything fits together in the admin panel.

5. Rename the '_htaccess' file to '.htaccess' (no quotes). Without the 
   mod_rewrite rules provided by this file, your installation will not work.
 
   Open this file and change the line 'RewriteBase /kittokittokitto' to what
   is appropriate for your installation. The /kittokittokitto is the base
   path of your installation. Examples:

   +-----------------------------------------------------------------------+
   | URL                                                | RewriteBase      |
   +----------------------------------------------------+------------------+
   | http://demo.kittokittokitto.yasashiisyndicate.org/ | /                |
   | http://bell.owl.ys/kittokittokitto                 | /kittokittokitto |
   | http://example.org/apps/kitto                      | /apps/kitto      |
   +----------------------------------------------------+------------------+
   
   If you still get 500 Internal Server errors, something is wrong with your
   webserver's configuration.

6. Edit /includes/config.inc.php. You need to specify your database/user/pw,
   the base path (on the filesystem), and the public directory (the base URL),
   at the minimum. There are lots more options to play with in there, though.
   Don't fret - there's lots of delicious in-line documentation.

   Furthermore, you may want to set your $_SERVER['RELEASE_MODE'] at the top of
   the config file. The setting in .htaccess does not always work properly,
   depending on your configuration. The DEV and PROD modes are provided for
   those of us who have two installs (one for developing against, one for
   people to use and upgrade once all of our changes are tested in DEV ;))
   and use version control. You know what a bitch configs can be...
   
7. Register and hopefully have it work. You probably want to give this account
   admin rights, too. If you have loaded the staff_group.sql data file, you can
   run these queries to add yourself to the Admin group and give that group 
   all available permissions. 

       INSERT INTO user_staff_group (user_id,staff_group_id) VALUES
       (1,1);
       
       INSERT INTO staff_group_staff_permission 
       (staff_group_id,staff_permission_id)
       SELECT 1 AS group_id, staff_permission_id FROM staff_permission; 

   After that, the admin panel will be open to you, and you can do your
   permission/group mapping stuff through there.

8. Customize. Redesign.

My tips to you at this point:
    
    * Read through the code. Learn where things go in the directory tree. There
      really isn't that much code to look at - most of the work is being done
      by ActiveTable automagically.

    * __LEARN HOW TO USE ACTIVETABLE__. It's a brand-new library, and docs are
      still forthcoming (although there's pretty good in-line documentation that
      can be compiled into HTML with phpdocumentor), but ActiveTable is a 
      *SERIOUS* timesaver. Without it, I would not have been able to write
      Kitto in (literally) five days. 

      There's some documentation for the library at 
      <http://aphp.yasashiisyndicate.org>. It's not complete, but it's not 
      exactly sparse, either. 
      
      Writing and debugging SQL is a bitch. It's error-prone. It's a timesink. 
      Why not have most of your SQL written for you by ActiveTable? ;-)

      Furthermore, ActiveTable uses PEAR::DB#prepare()/PEAR::DB#execute() for
      all of its operations, so you're absolutely safe from SQL injection,
      even if you don't use stripinput() in whatever you're passing it. How
      can you pass that up?

   * Use Smarty templates. As you can see, they keep all of your script files
     very small, clean, and easy-to-read. Plus, Smarty has a kickass caching
     engine, so when you realize the boards are causing high server loads, you
     can have Smarty cache the HTML it generates with a few extra lines. 
     
     No SQL/HTML generation = less load. You can even have Smarty expire a 
     cached template whenever someone makes a new post. Believe me - Smarty
     has a lot of features that make it worth learning.
     
     The Smarty manual is available at <http://smarty.php.net>. Give it a once-
     over, at the very least!

Nick 'Owl' Evans, 2007-09-22

KittoKittoKitto has been brought to you by the Yasashii Syndicate. 
<http://yasashiisyndicate.org>

Yasashii yoake, guys!
